{"version":3,"file":"static/js/873.4465d1e2.chunk.js","mappings":"8PAGaA,EAAiB,mCAAG,WAAMC,GAAN,0EAC1BA,EAD0B,yCAEtB,MAFsB,gCAKNC,EAAAA,EAAAA,IAAA,6CACiBD,EADjB,oBAPf,qCAEqB,cAKvBE,EALuB,yBAQtBA,EAASC,MARa,gCAU7BC,QAAQC,IAAR,wBAV6B,yDAAH,sD,SCiD9B,EA9CqB,WACnB,IAAQC,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA0BE,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,IAVAC,EAAAA,EAAAA,YACE,mCAAM,oGACoBZ,EAAkBO,GADtC,QACEM,EADF,SAGFF,EAASE,GAHP,0CAAN,GAMA,CAACN,KAGEG,EACH,OAAO,KAET,IAAMI,EAAeC,KAAKC,KAA0B,GAArBN,EAAMO,cAErC,OACE,4BACE,gBACEC,IAAG,yCAAoCR,EAAMS,YAA1C,KACHC,IAAI,SAEN,SAAC,KAAD,CAAMC,GAAG,IAAT,sBACA,oCAAYX,EAAMY,UAClB,wCAAgBR,EAAhB,QACA,sCACA,uBAAIJ,EAAMa,YACV,oCAEA,wBACGb,EAAMc,QACLd,EAAMc,OAAOC,KAAI,SAAAC,GACf,OAAO,wBAAoBA,EAAWC,MCtB9B,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC/B,EAAIgC,GAWvD,OAREhC,IAFFgC,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDsBQG,GACjB,OAEL,sDACA,SAAC,KAAD,CAAMf,GAAE,OAAR,mBACA,SAAC,KAAD,CAAMA,GAAE,UAAR,sBACA,SAAC,KAAD,MAGL,C","sources":["utils/fetchMovieDetails.js","components/MovieDetails/MovieDetails.jsx","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import axios from 'axios';\nconst KEY = '65128993e18cf258695ad7fce6893761';\n\nexport const fetchMovieDetails = async id => {\n  if (!id) {\n    return null;\n  }\n  try {\n    const response = await axios.get(\n      `https://api.themoviedb.org/3/movie/${id}?api_key=${KEY}`\n    );\n    return response.data;\n  } catch (error) {\n    console.log(`Error: ${error}`);\n  }\n};\n","import { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useParams, Outlet } from 'react-router-dom';\nimport { nanoid } from 'nanoid';\nimport { fetchMovieDetails } from '../../utils/fetchMovieDetails';\n\nconst MovieDetails = () => {\n  const { movieId } = useParams();\n  const [movie, setMovie] = useState([]);\n\n  useEffect(\n    () => async () => {\n      const movieData = await fetchMovieDetails(movieId);\n      if (movieData) {\n        setMovie(movieData);\n      }\n    },\n    [movieId]\n  );\n\n  if (!movie) {\n    return null;\n  }\n  const averageScore = Math.ceil(movie.vote_average * 10);\n\n  return (\n    <div>\n      <img\n        src={`https://image.tmdb.org/t/p/w500${movie.poster_path} `}\n        alt=\"cze\"\n      />\n      <Link to=\"/\">Go back</Link>\n      <h2>Title: {movie.title}</h2>\n      <p>User Score: {averageScore}%</p>\n      <h3>Overview</h3>\n      <p>{movie.overview}</p>\n      <h3>Genres</h3>\n\n      <ul>\n        {movie.genres &&\n          movie.genres.map(movieGenre => {\n            return <li key={nanoid()}>{movieGenre.name}</li>;\n          })}\n      </ul>\n      <span>Additional information</span>\n      <Link to={`cast`}>Cast</Link>\n      <Link to={`reviews`}>Reviews</Link>\n      <Outlet />\n    </div>\n  );\n};\n\nexport default MovieDetails;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["fetchMovieDetails","id","axios","response","data","console","log","movieId","useParams","useState","movie","setMovie","useEffect","movieData","averageScore","Math","ceil","vote_average","src","poster_path","alt","to","title","overview","genres","map","movieGenre","name","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}